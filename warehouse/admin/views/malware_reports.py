# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Admin Views related to Observations"""

from datetime import datetime, timezone

from pyramid.httpexceptions import HTTPSeeOther
from pyramid.view import view_config

from warehouse.authnz import Permissions
from warehouse.observations.models import Observation
from warehouse.utils.project import confirm_project, prohibit_and_remove_project


@view_config(
    route_name="admin.malware_reports.list",
    renderer="admin/malware_reports/list.html",
    permission=Permissions.AdminObservationsRead,
    request_method="GET",
    uses_session=True,
    require_csrf=True,
    require_methods=False,
)
def malware_reports_list(request):
    """
    List all Malware Reports.

    TODO: Paginate this view, not worthwhile just yet.
          Client-side pagination is a good enough solution for now.
    """
    malware_observations = (
        request.db.query(Observation)
        .filter(
            Observation.kind == "is_malware",
            Observation.related_id.isnot(None),
            Observation.actions == {},
        )
        .order_by(Observation.created)
        .all()
    )

    return {"malware_reports": malware_observations}


@view_config(
    route_name="admin.malware_reports.project.list",
    renderer="admin/malware_reports/project_list.html",
    permission=Permissions.AdminObservationsRead,
    request_method="GET",
    uses_session=True,
    require_csrf=True,
    require_methods=False,
)
def malware_reports_project_list(project, request):
    """
    List all Malware Reports for a specific project.
    """
    malware_observations = (
        request.db.query(Observation)
        .filter(
            Observation.related_id == project.id,
            Observation.kind == "is_malware",
            Observation.actions == {},
        )
        .order_by(Observation.created)
        .all()
    )

    return {"project": project, "malware_reports": malware_observations}


@view_config(
    route_name="admin.malware_reports.project.verdict_not_malware",
    permission=Permissions.AdminObservationsWrite,
    uses_session=True,
    require_csrf=True,
    require_methods=["POST"],
)
def malware_reports_project_verdict_not_malware(project, request):
    """
    Mark all Observations for Project as not malware.
    """
    observations = (
        request.db.query(Observation)
        .filter(Observation.related_id == project.id)
        .filter(Observation.kind == "is_malware")
        .all()
    )

    now = datetime.now(tz=timezone.utc)

    for observation in observations:
        observation.actions[int(now.timestamp())] = {
            "actor": request.user.username,
            "action": "verdict_not_malware",
            "reason": request.POST.get("reason"),
            "created_at": str(now),
        }

    request.session.flash(
        f"Project {project.name} marked as not malware.\n"
        "Please update related Help Scout conversations.",
        queue="success",
    )
    return HTTPSeeOther(request.route_path("admin.malware_reports.list"))


@view_config(
    route_name="admin.malware_reports.project.verdict_remove_malware",
    permission=Permissions.AdminProjectsDelete,
    uses_session=True,
    require_csrf=True,
    require_methods=["POST"],
)
def malware_reports_project_verdict_remove_malware(project, request):
    """
    Remove Project as malware, freeze associated user accounts,
    add action to all Malware Observations.
    """
    confirm_project(project, request, fail_route="admin.malware_reports.project.list")

    # freeze associated user accounts
    for user in project.users:
        user.is_frozen = True

    # add action to all Malware Observations, **before we remove the project**
    observations = (
        request.db.query(Observation)
        .filter(Observation.related_id == project.id)
        .filter(Observation.kind == "is_malware")
        .all()
    )

    now = datetime.now(tz=timezone.utc)

    for observation in observations:
        observation.actions[int(now.timestamp())] = {
            "actor": request.user.username,
            "action": "remove_malware",
            "created_at": str(now),
        }

    # prohibit the project
    prohibit_and_remove_project(project, request, comment="malware")

    request.session.flash(
        f"Malware Project {project.name} removed.\n"
        "Please update related Help Scout conversations.",
        queue="success",
    )
    return HTTPSeeOther(request.route_path("admin.malware_reports.list"))


@view_config(
    route_name="admin.malware_reports.detail",
    renderer="admin/malware_reports/detail.html",
    permission=Permissions.AdminObservationsRead,
    request_method="GET",
    uses_session=True,
    require_csrf=True,
    require_methods=False,
)
def malware_reports_detail(request):
    """
    Show a detailed view of a Malware Report.
    """
    observation_id = request.matchdict.get("observation_id")
    observation = request.db.get(Observation, observation_id)

    return {"report": observation}


@view_config(
    route_name="admin.malware_reports.detail.verdict_not_malware",
    permission=Permissions.AdminObservationsWrite,
    uses_session=True,
    require_csrf=True,
    require_methods=["POST"],
)
def not_malware_for_project(request):
    """
    Mark a Project as not malware.
    """
    observation_id = request.matchdict.get("observation_id")
    observation = request.db.get(Observation, observation_id)
    project = observation.related

    now = datetime.now(tz=timezone.utc)

    observation.actions[int(now.timestamp())] = {
        "actor": request.user.username,
        "action": "verdict_not_malware",
        "reason": request.POST.get("reason"),
        "created_at": str(now),
    }

    request.session.flash(
        f"Project {project.name} marked as not malware.\n"
        "Please update related Help Scout conversations.",
        queue="success",
    )
    return HTTPSeeOther(request.route_path("admin.malware_reports.list"))


@view_config(
    route_name="admin.malware_reports.detail.verdict_remove_malware",
    permission=Permissions.AdminProjectsDelete,
    uses_session=True,
    require_csrf=True,
    require_methods=["POST"],
)
def remove_malware_for_project(request):
    """
    Remove a Project as malware,
    freeze the Owner's account,
    add action to all Observations.
    """
    observation_id = request.matchdict.get("observation_id")
    observation = request.db.get(Observation, observation_id)
    project = observation.related

    confirm_project(project, request, fail_route="admin.malware_reports.detail")

    # freeze associated user accounts
    for user in project.users:
        user.is_frozen = True

    now = datetime.now(tz=timezone.utc)

    # Each Action is a dictionary entry keyed by timestamp
    observation.actions[int(now.timestamp())] = {
        "actor": request.user.username,
        "action": "remove_malware",
        "created_at": str(now),
    }

    prohibit_and_remove_project(project, request, comment="malware")

    request.session.flash(
        f"Malware Project {project.name} removed.\n"
        "Please update related Help Scout conversations.",
        queue="success",
    )
    return HTTPSeeOther(request.route_path("admin.malware_reports.list"))
