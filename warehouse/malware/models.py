# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import enum
import functools

from citext import CIText
from sqlalchemy import (
    Boolean,
    Column,
    DateTime,
    Enum,
    ForeignKey,
    Integer,
    String,
    Text,
    UniqueConstraint,
    orm,
    sql,
)
from sqlalchemy.dialects.postgresql import JSONB

from warehouse import db
from warehouse.utils.attrs import make_repr


@enum.unique
class MalwareCheckType(enum.Enum):

    EventHook = "event_hook"
    Scheduled = "scheduled"


@enum.unique
class MalwareCheckState(enum.Enum):

    Enabled = "enabled"
    Evaluation = "evaluation"
    Disabled = "disabled"
    WipedOut = "wiped_out"


@enum.unique
class MalwareCheckObjectType(enum.Enum):

    File = "File"
    Release = "Release"
    Project = "Project"


@enum.unique
@functools.total_ordering
class VerdictClassification(enum.Enum):
    """
    An enumeration of classification markers for malware verdicts.

    Note that the order of declaration is important: it provides
    the appropriate ordering behavior when finding the minimum
    and maximum classifications for a set of verdicts.
    """

    Benign = "benign"
    Indeterminate = "indeterminate"
    Threat = "threat"

    def __lt__(self, other):
        members = list(self.__class__)
        return members.index(self) < members.index(other)


@enum.unique
@functools.total_ordering
class VerdictConfidence(enum.Enum):
    """
    An enumeration of confidence markers for malware verdicts.

    Note that the order of declaration is important: it provides
    the appropriate ordering behavior when finding the minimum
    and maximum confidences for a set of verdicts.
    """

    Low = "low"
    Medium = "medium"
    High = "high"

    def __lt__(self, other):
        members = list(self.__class__)
        return members.index(self) < members.index(other)


class MalwareCheck(db.Model):

    __tablename__ = "malware_checks"
    __table_args__ = (UniqueConstraint("name", "version"),)
    __repr__ = make_repr("name", "version")

    name = Column(CIText, nullable=False)
    version = Column(Integer, default=1, nullable=False)
    short_description = Column(String(length=128), nullable=False)
    long_description = Column(Text, nullable=False)
    check_type = Column(
        Enum(MalwareCheckType, values_callable=lambda x: [e.value for e in x]),
        nullable=False,
    )
    # The object name that hooked-based checks operate on, e.g.
    # Project, File, Release
    hooked_object = Column(
        Enum(MalwareCheckObjectType, values_callable=lambda x: [e.value for e in x]),
        nullable=True,
    )
    # The run schedule for schedule-based checks.
    schedule = Column(JSONB, nullable=True)
    state = Column(
        Enum(MalwareCheckState, values_callable=lambda x: [e.value for e in x]),
        nullable=False,
        server_default=("disabled"),
    )
    created = Column(DateTime, nullable=False, server_default=sql.func.now())

    @property
    def is_stale(self):
        session = orm.object_session(self)
        newest = (
            session.query(MalwareCheck)
            .filter(MalwareCheck.name == self.name)
            .order_by(MalwareCheck.version.desc())
            .first()
        )
        return self.version != newest.version


class MalwareVerdict(db.Model):
    __tablename__ = "malware_verdicts"

    run_date = Column(DateTime, nullable=False, server_default=sql.func.now())
    check_id = Column(
        ForeignKey("malware_checks.id", onupdate="CASCADE", ondelete="CASCADE"),
        nullable=False,
        index=True,
    )
    file_id = Column(ForeignKey("release_files.id"), nullable=True)
    release_id = Column(ForeignKey("releases.id"), nullable=True)
    project_id = Column(ForeignKey("projects.id"), nullable=True)
    classification = Column(
        Enum(VerdictClassification, values_callable=lambda x: [e.value for e in x]),
        nullable=False,
    )
    confidence = Column(
        Enum(VerdictConfidence, values_callable=lambda x: [e.value for e in x]),
        nullable=False,
    )
    message = Column(Text, nullable=True)
    details = Column(JSONB, nullable=True)
    manually_reviewed = Column(Boolean, nullable=False, server_default=sql.false())
    reviewer_verdict = Column(
        Enum(VerdictClassification, values_callable=lambda x: [e.value for e in x]),
        nullable=True,
    )
    full_report_link = Column(String, nullable=True)

    check = orm.relationship("MalwareCheck", foreign_keys=[check_id], lazy=True)
    release_file = orm.relationship("File", foreign_keys=[file_id], lazy=True)
    release = orm.relationship("Release", foreign_keys=[release_id], lazy=True)
    project = orm.relationship("Project", foreign_keys=[project_id], lazy=True)
