# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from datetime import datetime, timedelta
from textwrap import dedent

from warehouse.accounts.models import UserEvent
from warehouse.malware.checks.base import MalwareCheckBase
from warehouse.malware.models import (
    MalwareVerdict,
    VerdictClassification,
    VerdictConfidence,
)
from warehouse.packaging.models import ProjectEvent, Release


class PackageTurnoverCheck(MalwareCheckBase):
    version = 1
    short_description = "A check for unusual changes in package ownership"
    long_description = dedent(
        """
        This check looks at recently uploaded releases and determines
        whether their owners have recently changed or decreased the security
        of their accounts (e.g., by disabling 2FA).
        """
    )
    check_type = "scheduled"
    schedule = {"minute": 0, "hour": 0}

    def __init__(self, db):
        super().__init__(db)
        self._scan_interval = datetime.utcnow() - timedelta(hours=24)

    def user_posture_verdicts(self, project):
        for user in project.users:
            has_removed_2fa_method = self.db.query(
                self.db.query(UserEvent)
                .filter(UserEvent.user_id == user.id)
                .filter(UserEvent.time >= self._scan_interval)
                .filter(UserEvent.tag == "account:two_factor:method_removed")
                .exists()
            ).scalar()

            if has_removed_2fa_method and not user.has_two_factor:
                self.add_verdict(
                    project_id=project.id,
                    classification=VerdictClassification.Threat,
                    confidence=VerdictConfidence.High,
                    message="User with control over this package has disabled 2FA",
                )

    def user_turnover_verdicts(self, project):
        # NOTE: This could probably be more involved to check for the case
        # where someone adds themself, removes the real maintainers, pushes a malicious
        # release, then reverts the ownership to the original maintainers and removes
        # themself again.
        recent_role_adds = (
            self.db.query(ProjectEvent.additional)
            .filter(ProjectEvent.project_id == project.id)
            .filter(ProjectEvent.time >= self._scan_interval)
            .filter(ProjectEvent.tag == "project:role:add")
            .all()
        )

        added_users = {role_add["target_user"] for role_add, in recent_role_adds}
        current_users = {user.username for user in project.users}

        if added_users == current_users:
            self.add_verdict(
                project_id=project.id,
                classification=VerdictClassification.Threat,
                confidence=VerdictConfidence.High,
                message="Suspicious user turnover; all current maintainers are new",
            )

    def scan(self, **kwargs):
        prior_verdicts = (
            self.db.query(MalwareVerdict.release_id).filter(
                MalwareVerdict.check_id == self.id
            )
        ).subquery()

        releases = (
            self.db.query(Release)
            .filter(Release.created >= self._scan_interval)
            .filter(~Release.id.in_(prior_verdicts))
            .all()
        )

        visited_project_ids = set()
        for release in releases:
            # Skip projects for which this is the first release,
            # since we need a baseline to compare against
            if len(release.project.releases) < 2:
                continue

            if release.project.id in visited_project_ids:
                continue

            visited_project_ids.add(release.project.id)

            self.user_posture_verdicts(release.project)
            self.user_turnover_verdicts(release.project)
