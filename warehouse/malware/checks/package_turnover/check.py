# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from datetime import datetime, timedelta
from textwrap import dedent

from sqlalchemy.sql import exists

from warehouse.packaging.models import Release
from warehouse.malware.models import MalwareVerdict
from warehouse.malware.checks.base import MalwareCheckBase


class PackageTurnoverCheck(MalwareCheckBase):
    version = 1
    short_description = "A check for unusual changes in package ownership"
    long_description = dedent(
        """
        This check looks at recently uploaded releases and determines
        whether their owners have recently changed or decreased the security
        of their accounts (e.g., by disabling 2FA).
        """
    )
    check_type = "scheduled"
    schedule = {"minute": 0, "hour": 0}

    def scan(self, **kwargs):
        # Collect all releases in the last 24 hours
        # Filter any releases that already have a verdict
        # For each upload:
        # 1. Collect the users who own the backing package
        # 2. For each user
        #    a. Check whether their security posture has degraded
        # 3. If any users' security posture has degraded, render a verdict
        #    of (indeterminate, medium)
        # 4. If any package has seen total ownership turnaround, render a verdict
        #    of (indeterminate, high)

        releases = (
            self.db.query(Release)
            .filter(Release.created >= datetime.utcnow() - timedelta(hours=24))
            .filter(~exists().where(Release.id == MalwareVerdict.release_id))
            .all()
        )

        for release in releases:
            # Skip projects for which this is the first release,
            # since we need a baseline to compare against
            if len(release.project.releases) < 2:
                continue

            prior_release = None
            users = release.project.users
