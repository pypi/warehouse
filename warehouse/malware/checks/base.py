# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from warehouse.malware.models import MalwareCheck, MalwareCheckState, MalwareVerdict
from warehouse.packaging import models


class MalwareCheckBase:
    def __init__(self, db):
        self.db = db
        self._name = self.__class__.__name__
        self._load_check_fields()
        self._verdicts = []

    @classmethod
    def prepare(cls, request, obj_id):
        """
        Prepare some context for scanning the given object.
        """
        kwargs = {"obj_id": obj_id}

        model = getattr(models, cls.hooked_object)
        kwargs["obj"] = request.db.query(model).get(obj_id)

        if cls.hooked_object == "File":
            kwargs["file_url"] = request.route_url(
                "packaging.file", path=kwargs["obj"].path
            )

        return kwargs

    def add_verdict(self, **kwargs):
        """
        Save a new verdict in the database. Subclasses should call this method
        explicitly.
        """
        self._verdicts.append(MalwareVerdict(check_id=self.id, **kwargs))

    def run(self, **kwargs):
        """
        Run the check and insert returned verdicts.
        """
        self.scan(**kwargs)
        self.db.add_all(self._verdicts)

    def scan(self, **kwargs):
        """
        Scan the object and return a verdict. Subclasses should implement
        this method.
        """

    def _load_check_fields(self):
        self.id, self.state = (
            self.db.query(MalwareCheck.id, MalwareCheck.state)
            .filter(MalwareCheck.name == self._name)
            .filter(
                MalwareCheck.state.in_(
                    [MalwareCheckState.Enabled, MalwareCheckState.Evaluation]
                )
            )
            .one()
        )
