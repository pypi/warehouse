# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os

from textwrap import dedent

import yara

from warehouse.malware.checks.base import MalwareCheckBase
from warehouse.malware.checks.utils import extract_file_content, fetch_url_content
from warehouse.malware.errors import FatalCheckException
from warehouse.malware.models import VerdictClassification, VerdictConfidence


class SetupPatternCheck(MalwareCheckBase):
    _yara_rule_file = os.path.join(
        os.path.dirname(os.path.abspath(__file__)), "setup_py_rules.yara"
    )

    version = 1
    short_description = "A check for common malicious patterns in setup.py"
    long_description = dedent(
        """
        This check uses YARA to search for common malicious patterns in the setup.py
        files of uploaded release archives.
        """
    )
    check_type = "event_hook"
    hooked_object = "File"

    def __init__(self, db):
        super().__init__(db)
        self._yara_rules = self._load_yara_rules()

    def _load_yara_rules(self):
        return yara.compile(filepath=self._yara_rule_file)

    def scan(self, **kwargs):
        release_file = kwargs.get("obj")
        file_url = kwargs.get("file_url")
        if release_file is None or file_url is None:
            raise FatalCheckException(
                "Release file or file url is None, indicating user error."
            )

        if release_file.packagetype != "sdist":
            # Per PEP 491: bdists do not contain setup.py.
            # This check only scans dists that contain setup.py, so
            # we have nothing to perform.
            return

        archive_stream = fetch_url_content(file_url)
        setup_py_contents = extract_file_content(archive_stream, "setup.py")
        if setup_py_contents is None:
            self.add_verdict(
                file_id=release_file.id,
                classification=VerdictClassification.Indeterminate,
                confidence=VerdictConfidence.High,
                message="sdist does not contain a suitable setup.py for analysis",
            )
            return

        matches = self._yara_rules.match(data=setup_py_contents)
        if len(matches) > 0:
            # We reduce N matches into a single verdict by taking the maximum
            # classification and confidence.
            classification = max(
                VerdictClassification(m.meta["classification"]) for m in matches
            )
            confidence = max(VerdictConfidence(m.meta["confidence"]) for m in matches)
            message = ":".join(m.rule for m in matches)

            details = {}
            for match in matches:
                details[match.rule] = {
                    "classification": match.meta["classification"],
                    "confidence": match.meta["confidence"],
                    # NOTE: We could include the raw bytes here (s[2]),
                    # but we'd have to serialize/encode it to make JSON happy.
                    # It probably suffices to include the offset and identifier
                    # for triage purposes.
                    "strings": [[s[0], s[1]] for s in match.strings],
                }

            self.add_verdict(
                file_id=release_file.id,
                classification=classification,
                confidence=confidence,
                message=message,
                details=details,
            )
        else:
            # No matches? Report a low-confidence benign verdict.
            self.add_verdict(
                file_id=release_file.id,
                classification=VerdictClassification.Benign,
                confidence=VerdictConfidence.Low,
                message="No malicious patterns found in setup.py",
            )
