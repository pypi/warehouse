# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import io
import pathlib
import tarfile
import zipfile

import requests


def fetch_url_content(url):
    """
    Retrieves the contents of the given (presumed CDN) URL as a BytesIO.

    Performs no error checking; exceptions are handled in the check harness
    as part of check retrying behavior.
    """
    response = requests.get(url)
    response.raise_for_status()
    return io.BytesIO(response.content)


def extract_file_content(archive_stream, file_path):
    """
    Retrieves the content of the given path from the given archive stream
    (presumed to be a dist) as bytes.

    Handling of the given path is a little special: since the dist format(s)
    don't enforce any naming convention for the base archive directory,
    the path is interpreted as {base}/{file_path}. Thus, a call like this:

        extract_file_content(stream, "setup.py")

    will extract and return the contents of {base}/setup.py where {base}
    is frequently (but not guaranteed to be) something like $name-$version.

    Returns None on any sort of failure.
    """
    if zipfile.is_zipfile(archive_stream):
        with zipfile.ZipFile(archive_stream) as zipobj:
            for name in zipobj.namelist():
                path_parts = pathlib.Path(name).parts
                if len(path_parts) >= 2:
                    tail = pathlib.Path(*path_parts[1:])
                    if str(tail) == file_path:
                        return zipobj.read(name)
            return None
    else:
        # NOTE: is_zipfile doesn't rewind the fileobj it's given.
        archive_stream.seek(0)

        # NOTE: We don't need to perform a sanity check on
        # the (presumed) tarfile's compression here, since we're
        # extracting from a stream that's already gone through
        # upload validation.
        # See _is_valid_dist_file in forklift/legacy.py.
        try:
            with tarfile.open(fileobj=archive_stream) as tarobj:
                member = tarobj.next()
                while member:
                    path_parts = pathlib.Path(member.name).parts
                    if len(path_parts) >= 2:
                        tail = pathlib.Path(*path_parts[1:])
                        if str(tail) == file_path:
                            return tarobj.extractfile(member).read()

                    member = tarobj.next()
                return None
        except tarfile.TarError:
            return None
