# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from warehouse import db
from warehouse.malware import utils
from warehouse.malware.interfaces import IMalwareCheckService


@db.listens_for(db.Session, "after_flush")
def determine_malware_checks(config, session, flush_context):
    if not session.new:
        return

    if not any(
        [
            obj.__class__.__name__
            for obj in session.new
            if obj.__class__.__name__ in utils.valid_check_types()
        ]
    ):
        return

    malware_checks = session.info.setdefault("warehouse.malware.checks", set())
    enabled_checks = utils.get_enabled_checks(session)
    for obj in session.new:
        for check_name in enabled_checks.get(obj.__class__.__name__, []):
            malware_checks.update([f"{check_name}:{obj.id}"])


@db.listens_for(db.Session, "after_commit")
def queue_malware_checks(config, session):

    malware_checks = session.info.pop("warehouse.malware.checks", set())
    if not malware_checks:
        return

    malware_check_factory = config.find_service_factory(IMalwareCheckService)

    malware_check = malware_check_factory(None, config)
    malware_check.run_checks(malware_checks)


def includeme(config):
    malware_check_class = config.maybe_dotted(
        config.registry.settings["malware_check.backend"]
    )
    # Register the malware check service
    config.register_service_factory(
        malware_check_class.create_service, IMalwareCheckService
    )
