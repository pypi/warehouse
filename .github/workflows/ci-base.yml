name: CI Base
on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
        description: 'Runner to use for jobs'
      runner_large:
        required: false
        type: string
        description: 'Large runner to use for heavy jobs'
      image_registry:
        required: true
        type: string
        description: 'Container registry for images'
      build_id:
        required: true
        type: string
        description: 'Build ID for the container image'
      use_depot:
        required: false
        type: boolean
        default: false
        description: 'Whether to use Depot for builds'

jobs:
  test:
    # Time out if our test suite has gotten hung
    timeout-minutes: 15
    strategy:
      matrix:
        include:
          - name: Tests
            command: bin/tests --postgresql-host postgres
            use_large_runner: true
          - name: Lint
            command: bin/lint
            use_large_runner: true
          - name: User Documentation
            command: bin/user-docs
          - name: Developer Documentation
            command: bin/dev-docs
          - name: Dependencies
            command: bin/deps
          - name: Licenses
            command: bin/licenses
          - name: Translations
            command: bin/translations
    runs-on: ${{ (matrix.use_large_runner && inputs.runner_large != '') && inputs.runner_large || inputs.runner }}
    container:
      image: ${{ inputs.image_registry }}:${{ inputs.build_id }}
      env:
        BILLING_BACKEND: warehouse.subscriptions.services.MockStripeBillingService api_base=http://stripe:12111 api_version=2020-08-27
    permissions:
      id-token: write
      packages: read
    services:
      postgres:
        image: ${{ (matrix.name == 'Tests') && 'postgres:17.5' || '' }}
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust  # never do this in production!
          POSTGRES_INITDB_ARGS: '--no-sync --set fsync=off --set full_page_writes=off'
        # Set health checks to wait until postgres has started
        options: --health-cmd "pg_isready --username=postgres --dbname=postgres" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: ${{ (matrix.name == 'Tests') && 'redis:7.0' || '' }}
        ports:
          - 6379:6379
      stripe:
        image: ${{ (matrix.name == 'Tests') && 'stripe/stripe-mock:v0.162.0' || '' }}
        ports:
          - 12111:12111
    name: ${{ matrix.name }}${{ !inputs.use_depot && ' (GHA)' || '' }}
    steps:
      - name: Check out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Cache mypy results
        if: ${{ (matrix.name == 'Lint') }}
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
              dev/.mypy_cache
          key: ${{ runner.os }}-mypy-${{ env.pythonLocation }}-${{ hashFiles('requirements.txt', 'requirements/*.txt') }}
      - name: Run ${{ matrix.name }}
        run: ${{ matrix.command }}

  check_db:
    name: Check Database Consistency${{ !inputs.use_depot && ' (GHA)' || '' }}
    runs-on: ${{ inputs.runner }}
    continue-on-error: true
    container:
      image: ${{ inputs.image_registry }}:${{ inputs.build_id }}
    permissions:
      id-token: write
      packages: read
    services:
      postgres:
        image: postgres:17.5
        ports:
        - 5432:5432
        env:
          POSTGRES_DB: warehouse
          POSTGRES_HOST_AUTH_METHOD: trust  # never do this in production!
          POSTGRES_INITDB_ARGS: '--no-sync --set fsync=off --set full_page_writes=off'
        # Set health checks to wait until postgres has started
        options: --health-cmd "pg_isready --username=postgres --dbname=postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Check out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Dotenv Action
        # We need to load the environment variables to run the CLI
        id: dotenv
        uses: falti/dotenv-action@a33be0b8cf6a6e6f1b82cc9f3782061ab1022be5 # v1.1.4
        with:
          path: dev/environment
          export-variables: true
          keys-case: upper
      - name: Install jq
        run: apt-get update && apt-get install -y jq
      - name: Check Database
        run: bin/db-check
        env:
          # override the hostname set in `dev/environment`
          DATABASE_URL: 'postgresql+psycopg://postgres@postgres/warehouse'