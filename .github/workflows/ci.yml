name: CI
on:
  push:
    branches:
      - main
  pull_request:
  merge_group:
    types: [checks_requested]
  workflow_dispatch:  # generally only for the "combine-prs" workflow
permissions:
  contents: read
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
jobs:
  build:
    runs-on: ubuntu-24.04-arm
    outputs:
      buildId: ${{ github.run_id }}
    permissions:
      packages: write
    steps:
      - name: Check out repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # zizmor: ignore[cache-poisoning]
      - name: Cache
        uses: actions/cache@v3 # zizmor: ignore[cache-poisoning]
        id: cache
        with:
          path: |
            var-cache-apt
            var-lib-apt
            root-cache-pip
            root-npm
          key: cache-${{ hashFiles('Dockerfile') }}
      - name: inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "var-cache-apt": "/var/cache/apt",
              "var-lib-apt": "/var/lib/apt",
              "root-cache-pip": "/root/.cache/pip",
              "root-npm": "/root/.npm"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}
      - name: Login To GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          build-args: |
            DEVEL=yes
            CI=yes
          tags: |
            ghcr.io/pypi/warehouse:ci-${{ github.run_id }}
  test:
    # Time out if our test suite has gotten hung
    timeout-minutes: 15
    needs: build
    strategy:
      matrix:
        include:
          - name: Tests
            command: bin/tests --postgresql-host postgres
          - name: Lint
            command: bin/lint
          - name: User Documentation
            command: bin/user-docs
          - name: Developer Documentation
            command: bin/dev-docs
          - name: Dependencies
            command: bin/deps
          - name: Licenses
            command: bin/licenses
          - name: Translations
            command: bin/translations
    runs-on: ubuntu-24.04-arm
    container:
      image: ghcr.io/pypi/warehouse:ci-${{ needs.build.outputs.buildId }}
      env:
        BILLING_BACKEND: warehouse.subscriptions.services.MockStripeBillingService api_base=http://stripe:12111 api_version=2020-08-27
    permissions:
      packages: read
    services:
      postgres:
        image: ${{ (matrix.name == 'Tests') && 'postgres:16.1' || '' }}
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust  # never do this in production!
          POSTGRES_INITDB_ARGS: '--no-sync --set fsync=off --set full_page_writes=off'
        # Set health checks to wait until postgres has started
        options: --health-cmd "pg_isready --username=postgres --dbname=postgres" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: ${{ (matrix.name == 'Tests') && 'redis:7.0' || '' }}
        ports:
          - 6379:6379
      stripe:
        image: ${{ (matrix.name == 'Tests') && 'stripe/stripe-mock:v0.162.0' || '' }}
        ports:
          - 12111:12111
    name: ${{ matrix.name }}
    steps:
      - name: Check out repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Cache mypy results
        if: ${{ (matrix.name == 'Lint') }}
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
              dev/.mypy_cache
          key: ${{ runner.os }}-mypy-${{ env.pythonLocation }}-${{ hashFiles('requirements.txt', 'requirements/*.txt') }}
      - name: Run ${{ matrix.name }}
        run: ${{ matrix.command }}

  check_db:
    name: Check Database Consistency
    needs: build
    runs-on: ubuntu-24.04-arm
    continue-on-error: true
    container:
      image: ghcr.io/pypi/warehouse:ci-${{ needs.build.outputs.buildId }}
    permissions:
      packages: read
    services:
      postgres:
        image: postgres:16.1
        ports:
        - 5432:5432
        env:
          POSTGRES_DB: warehouse
          POSTGRES_HOST_AUTH_METHOD: trust  # never do this in production!
          POSTGRES_INITDB_ARGS: '--no-sync --set fsync=off --set full_page_writes=off'
        # Set health checks to wait until postgres has started
        options: --health-cmd "pg_isready --username=postgres --dbname=postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Check out repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Dotenv Action
        # We need to load the environment variables to run the CLI
        id: dotenv
        uses: falti/dotenv-action@a33be0b8cf6a6e6f1b82cc9f3782061ab1022be5 # v1.1.4
        with:
          path: dev/environment
          export-variables: true
          keys-case: upper
      - name: Check Database
        run: bin/db-check
        env:
          # override the hostname set in `dev/environment`
          DATABASE_URL: 'postgresql+psycopg://postgres@postgres/warehouse'
