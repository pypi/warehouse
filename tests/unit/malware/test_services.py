# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import pretend

from zope.interface.verify import verifyClass

from warehouse.malware.interfaces import IMalwareCheckService
from warehouse.malware.services import (
    DatabaseMalwareCheckService,
    PrinterMalwareCheckService,
)
from warehouse.malware.tasks import run_check


class TestPrinterMalwareCheckService:
    def test_verify_service(self):
        assert verifyClass(IMalwareCheckService, PrinterMalwareCheckService)

    def test_create_service(self):
        request = pretend.stub()
        service = PrinterMalwareCheckService.create_service(None, request)
        assert service.executor == print

    def test_run_checks(self, capfd):
        request = pretend.stub()
        service = PrinterMalwareCheckService.create_service(None, request)
        checks = ["one", "two", "three"]
        service.run_checks(checks)
        out, err = capfd.readouterr()
        assert out == "one\ntwo\nthree\n"


class TestDatabaseMalwareService:
    def test_verify_service(self):
        assert verifyClass(IMalwareCheckService, DatabaseMalwareCheckService)

    def test_create_service(self, db_request):
        _delay = pretend.call_recorder(lambda *args: None)
        db_request.task = lambda x: pretend.stub(delay=_delay)
        service = DatabaseMalwareCheckService.create_service(None, db_request)
        assert service.executor == db_request.task(run_check).delay

    def test_run_checks(self, db_request):
        _delay = pretend.call_recorder(lambda *args: None)
        db_request.task = lambda x: pretend.stub(delay=_delay)
        service = DatabaseMalwareCheckService.create_service(None, db_request)
        checks = ["MyTestCheck:ba70267f-fabf-496f-9ac2-d237a983b187"]
        service.run_checks(checks)
        assert _delay.calls == [
            pretend.call("MyTestCheck", "ba70267f-fabf-496f-9ac2-d237a983b187")
        ]
