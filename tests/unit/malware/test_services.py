# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import pretend
import pytest

from zope.interface.verify import verifyClass

from warehouse.malware.interfaces import IMalwareCheckService
from warehouse.malware.services import (
    DatabaseMalwareCheckService,
    PrinterMalwareCheckService,
)
from warehouse.malware.tasks import run_check


class TestPrinterMalwareCheckService:
    def test_verify_service(self):
        assert verifyClass(IMalwareCheckService, PrinterMalwareCheckService)

    def test_create_service(self):
        request = pretend.stub()
        service = PrinterMalwareCheckService.create_service(None, request)
        assert service.executor == print

    @pytest.mark.parametrize(("kwargs"), [{}, {"manually_triggered": True}])
    def test_run_checks(self, capfd, kwargs):
        request = pretend.stub()
        service = PrinterMalwareCheckService.create_service(None, request)
        checks = ["one", "two", "three"]
        service.run_checks(checks, **kwargs)
        out, err = capfd.readouterr()
        assert out == "".join(["%s %s\n" % (check, kwargs) for check in checks])


class TestDatabaseMalwareService:
    def test_verify_service(self):
        assert verifyClass(IMalwareCheckService, DatabaseMalwareCheckService)

    def test_create_service(self, db_request):
        _delay = pretend.call_recorder(lambda *args: None)
        db_request.task = lambda x: pretend.stub(delay=_delay)
        service = DatabaseMalwareCheckService.create_service(None, db_request)
        assert service.executor == db_request.task(run_check).delay

    def test_run_hooked_check(self, db_request):
        _delay = pretend.call_recorder(lambda *args, **kwargs: None)
        db_request.task = lambda x: pretend.stub(delay=_delay)
        service = DatabaseMalwareCheckService.create_service(None, db_request)
        checks = [
            "MyTestCheck:ba70267f-fabf-496f-9ac2-d237a983b187",
            "AnotherCheck:44f57b0e-c5b0-47c5-8713-341cf392efe2",
            "FinalCheck:e8518a15-8f01-430e-8f5b-87644007c9c0",
        ]
        service.run_checks(checks)
        assert _delay.calls == [
            pretend.call("MyTestCheck", obj_id="ba70267f-fabf-496f-9ac2-d237a983b187"),
            pretend.call("AnotherCheck", obj_id="44f57b0e-c5b0-47c5-8713-341cf392efe2"),
            pretend.call("FinalCheck", obj_id="e8518a15-8f01-430e-8f5b-87644007c9c0"),
        ]

    def test_run_scheduled_check(self, db_request):
        _delay = pretend.call_recorder(lambda *args, **kwargs: None)
        db_request.task = lambda x: pretend.stub(delay=_delay)
        service = DatabaseMalwareCheckService.create_service(None, db_request)
        checks = ["MyTestScheduledCheck"]
        service.run_checks(checks)
        assert _delay.calls == [pretend.call("MyTestScheduledCheck")]

    def test_run_triggered_check(self, db_request):
        _delay = pretend.call_recorder(lambda *args, **kwargs: None)
        db_request.task = lambda x: pretend.stub(delay=_delay)
        service = DatabaseMalwareCheckService.create_service(None, db_request)
        checks = ["MyTriggeredCheck"]
        service.run_checks(checks, manually_triggered=True)
        assert _delay.calls == [
            pretend.call("MyTriggeredCheck", manually_triggered=True)
        ]
