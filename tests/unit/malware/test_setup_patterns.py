import pretend
import yara

from warehouse.malware.checks.setup_patterns import check as c
from warehouse.malware.models import (
    MalwareCheckState,
    VerdictClassification,
    VerdictConfidence,
)

from ...common.db.malware import MalwareCheckFactory
from ...common.db.packaging import FileFactory


def test_initializes(db_session):
    check_model = MalwareCheckFactory.create(
        name="SetupPatternCheck", state=MalwareCheckState.Enabled
    )
    check = c.SetupPatternCheck(db_session)

    assert check.id == check_model.id
    assert isinstance(check._yara_rules, yara.Rules)


def test_scan_non_sdist(db_session):
    MalwareCheckFactory.create(
        name="SetupPatternCheck", state=MalwareCheckState.Enabled
    )
    check = c.SetupPatternCheck(db_session)

    file = FileFactory.create(packagetype="bdist_wheel")

    check.scan(obj_id=file.id, file_url=pretend.stub())

    assert check._verdicts == []


def test_scan_request_failed(db_session, monkeypatch):
    requests = pretend.stub(
        get=pretend.call_recorder(lambda url: pretend.stub(ok=False))
    )
    monkeypatch.setattr(c, "requests", requests)

    MalwareCheckFactory.create(
        name="SetupPatternCheck", state=MalwareCheckState.Enabled
    )
    check = c.SetupPatternCheck(db_session)

    file = FileFactory.create(packagetype="sdist")

    check.scan(obj_id=file.id, file_url=pretend.stub())

    assert check._verdicts == []


def test_scan_no_setup_contents(db_session, monkeypatch):
    requests = pretend.stub(
        get=pretend.call_recorder(
            lambda url: pretend.stub(ok=True, content=b"not real content")
        )
    )
    monkeypatch.setattr(c, "requests", requests)

    MalwareCheckFactory.create(
        name="SetupPatternCheck", state=MalwareCheckState.Enabled
    )
    check = c.SetupPatternCheck(db_session)
    monkeypatch.setattr(
        check, "_extract_setup_contents", pretend.call_recorder(lambda *a: None)
    )

    file = FileFactory.create(packagetype="sdist")

    check.scan(obj_id=file.id, file_url=pretend.stub())

    assert len(check._verdicts) == 1
    assert check._verdicts[0].check_id == check.id
    assert check._verdicts[0].file_id == file.id
    assert check._verdicts[0].classification == VerdictClassification.Indeterminate
    assert check._verdicts[0].confidence == VerdictConfidence.High
    assert (
        check._verdicts[0].message
        == "sdist does not contain a suitable setup.py for analysis"
    )
