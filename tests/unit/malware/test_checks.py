# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import inspect

import pretend
import pytest

import warehouse.malware.checks as prod_checks

from warehouse.malware.checks.base import MalwareCheckBase
from warehouse.malware.utils import get_check_fields

from ...common import checks as test_checks
from ...common.db.packaging import FileFactory


def test_checks_subclass_base():
    prod_checks_from_module = inspect.getmembers(prod_checks, inspect.isclass)
    test_checks_from_module = inspect.getmembers(test_checks, inspect.isclass)
    all_checks = prod_checks_from_module + test_checks_from_module

    subclasses_of_malware_base = {
        cls.__name__: cls for cls in MalwareCheckBase.__subclasses__()
    }

    assert len(all_checks) == len(subclasses_of_malware_base)

    for check_name, check in all_checks:
        assert subclasses_of_malware_base[check_name] == check


@pytest.mark.parametrize(("checks"), [prod_checks, test_checks])
def test_checks_fields(checks):
    checks_from_module = inspect.getmembers(checks, inspect.isclass)

    for check_name, check in checks_from_module:
        elems = inspect.getmembers(check, lambda a: not (inspect.isroutine(a)))
        inspection_fields = {"name": check_name}
        for elem_name, value in elems:
            # Skip both dunder and "private" (_-prefixed) attributes
            if not elem_name.startswith("_"):
                inspection_fields[elem_name] = value
        fields = get_check_fields(check)

        assert inspection_fields == fields


def test_base_prepare_file_hooked(db_session):
    file = FileFactory.create()
    request = pretend.stub(
        db=db_session, route_url=pretend.call_recorder(lambda *a, **kw: "fake_url")
    )

    kwargs = test_checks.ExampleHookedCheck.prepare(request, file.id)

    assert request.route_url.calls == [pretend.call("packaging.file", path=file.path)]
    assert "file_url" in kwargs
    assert kwargs["file_url"] == "fake_url"


def test_base_prepare_nonfile_hooked(db_session):
    file = FileFactory.create()
    request = pretend.stub(
        db=db_session, route_url=pretend.call_recorder(lambda *a, **kw: "fake_url")
    )

    class FakeProjectCheck(MalwareCheckBase):
        hooked_object = "Project"

    kwargs = FakeProjectCheck.prepare(request, file.id)
    assert request.route_url.calls == []
    assert "file_url" not in kwargs
