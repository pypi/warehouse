# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import pretend
import pytest
import yara

from warehouse.malware.checks.setup_patterns import check as c
from warehouse.malware.models import (
    MalwareCheckState,
    VerdictClassification,
    VerdictConfidence,
)

from .....common.db.malware import MalwareCheckFactory
from .....common.db.packaging import FileFactory


def test_initializes(db_session):
    check_model = MalwareCheckFactory.create(
        name="SetupPatternCheck", state=MalwareCheckState.Enabled
    )
    check = c.SetupPatternCheck(db_session)

    assert check.id == check_model.id
    assert isinstance(check._yara_rules, yara.Rules)


@pytest.mark.parametrize(
    ("obj", "file_url"), [(None, pretend.stub()), (pretend.stub(), None)]
)
def test_scan_missing_kwargs(db_session, obj, file_url):
    MalwareCheckFactory.create(
        name="SetupPatternCheck", state=MalwareCheckState.Enabled
    )
    check = c.SetupPatternCheck(db_session)
    check.scan(obj=obj, file_url=file_url)

    assert check._verdicts == []


def test_scan_non_sdist(db_session):
    MalwareCheckFactory.create(
        name="SetupPatternCheck", state=MalwareCheckState.Enabled
    )
    check = c.SetupPatternCheck(db_session)

    file = FileFactory.create(packagetype="bdist_wheel")

    check.scan(obj=file, file_url=pretend.stub())

    assert check._verdicts == []


def test_scan_no_setup_contents(db_session, monkeypatch):
    monkeypatch.setattr(
        c, "fetch_url_content", pretend.call_recorder(lambda *a: pretend.stub())
    )
    monkeypatch.setattr(
        c, "extract_file_content", pretend.call_recorder(lambda *a: None)
    )

    MalwareCheckFactory.create(
        name="SetupPatternCheck", state=MalwareCheckState.Enabled
    )
    check = c.SetupPatternCheck(db_session)

    file = FileFactory.create(packagetype="sdist")

    check.scan(obj=file, file_url=pretend.stub())

    assert len(check._verdicts) == 1
    assert check._verdicts[0].check_id == check.id
    assert check._verdicts[0].file_id == file.id
    assert check._verdicts[0].classification == VerdictClassification.Indeterminate
    assert check._verdicts[0].confidence == VerdictConfidence.High
    assert (
        check._verdicts[0].message
        == "sdist does not contain a suitable setup.py for analysis"
    )


def test_scan_benign_contents(db_session, monkeypatch):
    monkeypatch.setattr(
        c, "fetch_url_content", pretend.call_recorder(lambda *a: pretend.stub())
    )
    monkeypatch.setattr(
        c,
        "extract_file_content",
        pretend.call_recorder(lambda *a: b"this is a benign string"),
    )

    MalwareCheckFactory.create(
        name="SetupPatternCheck", state=MalwareCheckState.Enabled
    )
    check = c.SetupPatternCheck(db_session)

    file = FileFactory.create(packagetype="sdist")

    check.scan(obj=file, file_url=pretend.stub())

    assert len(check._verdicts) == 1
    assert check._verdicts[0].check_id == check.id
    assert check._verdicts[0].file_id == file.id
    assert check._verdicts[0].classification == VerdictClassification.Benign
    assert check._verdicts[0].confidence == VerdictConfidence.Low
    assert check._verdicts[0].message == "No malicious patterns found in setup.py"


def test_scan_matched_content(db_session, monkeypatch):
    monkeypatch.setattr(
        c, "fetch_url_content", pretend.call_recorder(lambda *a: pretend.stub())
    )
    monkeypatch.setattr(
        c,
        "extract_file_content",
        pretend.call_recorder(
            lambda *a: b"this looks suspicious: os.system('cat /etc/passwd')"
        ),
    )

    MalwareCheckFactory.create(
        name="SetupPatternCheck", state=MalwareCheckState.Enabled
    )
    check = c.SetupPatternCheck(db_session)

    file = FileFactory.create(packagetype="sdist")

    check.scan(obj=file, file_url=pretend.stub())

    assert len(check._verdicts) == 1
    assert check._verdicts[0].check_id == check.id
    assert check._verdicts[0].file_id == file.id
    assert check._verdicts[0].classification == VerdictClassification.Threat
    assert check._verdicts[0].confidence == VerdictConfidence.High
    assert check._verdicts[0].message == "process_spawn_in_setup"
