# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import io
import tarfile
import zipfile

import pretend

from warehouse.malware.checks import utils


def test_fetch_url_content(monkeypatch):
    response = pretend.stub(
        raise_for_status=pretend.call_recorder(lambda: None), content=b"fake content"
    )
    requests = pretend.stub(get=pretend.call_recorder(lambda url: response))

    monkeypatch.setattr(utils, "requests", requests)

    io = utils.fetch_url_content("hxxp://fake_url.com")

    assert requests.get.calls == [pretend.call("hxxp://fake_url.com")]
    assert response.raise_for_status.calls == [pretend.call()]
    assert io.getvalue() == b"fake content"


def test_extract_file_contents_zip():
    zipbuf = io.BytesIO()
    with zipfile.ZipFile(zipbuf, mode="w") as zipobj:
        zipobj.writestr("toplevelgetsskipped", b"nothing to see here")
        zipobj.writestr("foo/setup.py", b"these are some contents")
    zipbuf.seek(0)

    assert utils.extract_file_content(zipbuf, "setup.py") == b"these are some contents"


def test_extract_file_contents_zip_no_file():
    zipbuf = io.BytesIO()
    with zipfile.ZipFile(zipbuf, mode="w") as zipobj:
        zipobj.writestr("foo/notsetup.py", b"these are some contents")
    zipbuf.seek(0)

    assert utils.extract_file_content(zipbuf, "setup.py") is None


def test_extract_file_contents_tar():
    tarbuf = io.BytesIO()
    with tarfile.open(fileobj=tarbuf, mode="w:gz") as tarobj:
        contents = io.BytesIO(b"these are some contents")
        member = tarfile.TarInfo(name="foo/setup.py")
        member.size = len(contents.getbuffer())
        tarobj.addfile(member, fileobj=contents)

        contents = io.BytesIO(b"nothing to see here")
        member = tarfile.TarInfo(name="toplevelgetsskipped")
        member.size = len(contents.getbuffer())
        tarobj.addfile(member, fileobj=contents)
    tarbuf.seek(0)

    assert utils.extract_file_content(tarbuf, "setup.py") == b"these are some contents"


def test_extract_file_contents_tar_empty():
    tarbuf = io.BytesIO(b"invalid tar contents")

    assert utils.extract_file_content(tarbuf, "setup.py") is None


def test_extract_file_contents_tar_no_file():
    tarbuf = io.BytesIO()
    with tarfile.open(fileobj=tarbuf, mode="w:gz") as tarobj:
        contents = io.BytesIO(b"these are some contents")
        member = tarfile.TarInfo(name="foo/notsetup.py")
        member.size = len(contents.getbuffer())
        tarobj.addfile(member, fileobj=contents)

        contents = io.BytesIO(b"nothing to see here")
        member = tarfile.TarInfo(name="toplevelgetsskipped")
        member.size = len(contents.getbuffer())
        tarobj.addfile(member, fileobj=contents)
    tarbuf.seek(0)

    assert utils.extract_file_content(tarbuf, "setup.py") is None
