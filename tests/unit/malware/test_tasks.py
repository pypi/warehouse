# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import celery
import pretend
import pytest

from sqlalchemy.orm.exc import NoResultFound

from warehouse.malware import tasks
from warehouse.malware.models import MalwareCheck, MalwareCheckState, MalwareVerdict

from ...common import checks as test_checks
from ...common.db.malware import MalwareCheckFactory, MalwareVerdictFactory
from ...common.db.packaging import FileFactory, ProjectFactory, ReleaseFactory


class TestRunCheck:
    def test_success(self, db_request, monkeypatch):
        monkeypatch.setattr(tasks, "checks", test_checks)
        file0 = FileFactory.create()
        MalwareCheckFactory.create(
            name="ExampleHookedCheck", state=MalwareCheckState.enabled
        )
        task = pretend.stub()
        tasks.run_check(task, db_request, "ExampleHookedCheck", file0.id)

        assert db_request.db.query(MalwareVerdict).one()

    def test_disabled_check(self, db_request, monkeypatch):
        monkeypatch.setattr(tasks, "checks", test_checks)
        MalwareCheckFactory.create(
            name="ExampleHookedCheck", state=MalwareCheckState.disabled
        )

        task = pretend.stub()

        with pytest.raises(NoResultFound):
            tasks.run_check(
                task,
                db_request,
                "ExampleHookedCheck",
                "d03d75d1-2511-4a8b-9759-62294a6fe3a7",
            )

    def test_missing_check(self, db_request, monkeypatch):
        monkeypatch.setattr(tasks, "checks", test_checks)
        task = pretend.stub()
        with pytest.raises(AttributeError):
            tasks.run_check(
                task,
                db_request,
                "DoesNotExistCheck",
                "d03d75d1-2511-4a8b-9759-62294a6fe3a7",
            )

    def test_retry(self, db_session, monkeypatch):
        exc = Exception("Scan failed")

        def scan(self, file_id):
            raise exc

        monkeypatch.setattr(tasks, "checks", test_checks)
        monkeypatch.setattr(tasks.checks.ExampleHookedCheck, "scan", scan)

        MalwareCheckFactory.create(
            name="ExampleHookedCheck", state=MalwareCheckState.evaluation
        )

        task = pretend.stub(
            retry=pretend.call_recorder(pretend.raiser(celery.exceptions.Retry)),
        )
        request = pretend.stub(
            db=db_session,
            log=pretend.stub(error=pretend.call_recorder(lambda *args, **kwargs: None)),
        )

        with pytest.raises(celery.exceptions.Retry):
            tasks.run_check(
                task,
                request,
                "ExampleHookedCheck",
                "d03d75d1-2511-4a8b-9759-62294a6fe3a7",
            )

        assert request.log.error.calls == [
            pretend.call("Error executing check ExampleHookedCheck: Scan failed")
        ]

        assert task.retry.calls == [pretend.call(exc=exc)]


class TestBackfill:
    def test_invalid_check_name(self, db_request, monkeypatch):
        monkeypatch.setattr(tasks, "checks", test_checks)
        task = pretend.stub()
        with pytest.raises(AttributeError):
            tasks.backfill(task, db_request, "DoesNotExist", 1)

    @pytest.mark.parametrize(
        ("num_objects", "num_runs"), [(11, 1), (11, 11), (101, 90)],
    )
    def test_run(self, db_session, num_objects, num_runs, monkeypatch):
        monkeypatch.setattr(tasks, "checks", test_checks)
        files = []
        for i in range(num_objects):
            files.append(FileFactory.create())

        MalwareCheckFactory.create(
            name="ExampleHookedCheck", state=MalwareCheckState.enabled
        )

        enqueue_recorder = pretend.stub(
            delay=pretend.call_recorder(lambda *a, **kw: None)
        )
        task = pretend.call_recorder(lambda *args, **kwargs: enqueue_recorder)

        request = pretend.stub(
            db=db_session,
            log=pretend.stub(info=pretend.call_recorder(lambda *args, **kwargs: None)),
            task=task,
        )

        tasks.backfill(task, request, "ExampleHookedCheck", num_runs)

        assert request.log.info.calls == [
            pretend.call("Running backfill on %d Files." % num_runs),
        ]

        assert enqueue_recorder.delay.calls == [
            pretend.call("ExampleHookedCheck", files[i].id) for i in range(num_runs)
        ]


class TestSyncChecks:
    def test_no_updates(self, db_session, monkeypatch):
        monkeypatch.setattr(tasks, "checks", test_checks)
        monkeypatch.setattr(tasks.checks.ExampleScheduledCheck, "version", 2)
        MalwareCheckFactory.create(
            name="ExampleHookedCheck", state=MalwareCheckState.disabled
        )
        MalwareCheckFactory.create(
            name="ExampleScheduledCheck", state=MalwareCheckState.disabled
        )
        MalwareCheckFactory.create(
            name="ExampleScheduledCheck", state=MalwareCheckState.enabled, version=2
        )

        task = pretend.stub()

        request = pretend.stub(
            db=db_session,
            log=pretend.stub(info=pretend.call_recorder(lambda *args, **kwargs: None),),
        )

        tasks.sync_checks(task, request)

        assert request.log.info.calls == [
            pretend.call("2 malware checks found in codebase."),
            pretend.call("ExampleHookedCheck is unmodified."),
            pretend.call("ExampleScheduledCheck is unmodified."),
        ]

    @pytest.mark.parametrize(
        ("final_state"), [MalwareCheckState.enabled, MalwareCheckState.disabled]
    )
    def test_upgrade_check(self, monkeypatch, db_session, final_state):
        monkeypatch.setattr(tasks, "checks", test_checks)
        monkeypatch.setattr(tasks.checks.ExampleHookedCheck, "version", 2)

        MalwareCheckFactory.create(name="ExampleHookedCheck", state=final_state)
        MalwareCheckFactory.create(
            name="ExampleScheduledCheck", state=MalwareCheckState.disabled
        )

        task = pretend.stub()
        request = pretend.stub(
            db=db_session,
            log=pretend.stub(info=pretend.call_recorder(lambda *args, **kwargs: None),),
        )

        tasks.sync_checks(task, request)

        assert request.log.info.calls == [
            pretend.call("2 malware checks found in codebase."),
            pretend.call("Updating existing ExampleHookedCheck."),
            pretend.call("ExampleScheduledCheck is unmodified."),
        ]
        db_checks = (
            db_session.query(MalwareCheck)
            .filter(MalwareCheck.name == "ExampleHookedCheck")
            .all()
        )

        assert len(db_checks) == 2

        if final_state == MalwareCheckState.disabled:
            assert (
                db_checks[0].state == db_checks[1].state == MalwareCheckState.disabled
            )

        else:
            for c in db_checks:
                if c.state == final_state:
                    assert c.version == 2
                else:
                    assert c.version == 1

    def test_one_new_check(self, db_session, monkeypatch):
        monkeypatch.setattr(tasks, "checks", test_checks)

        MalwareCheckFactory.create(
            name="ExampleHookedCheck", state=MalwareCheckState.disabled
        )
        MalwareCheckFactory.create(
            name="ExampleScheduledCheck", state=MalwareCheckState.disabled
        )

        task = pretend.stub()

        class FakeMalwareCheck:
            version = 1
            short_description = "This is a short description."
            long_description = "This is a longer description."
            check_type = "scheduled"
            schedule = {"minute": "0", "hour": "*/8"}

        tasks.checks.FakeMalwareCheck = FakeMalwareCheck

        request = pretend.stub(
            db=db_session,
            log=pretend.stub(info=pretend.call_recorder(lambda *args, **kwargs: None),),
        )

        tasks.sync_checks(task, request)

        assert request.log.info.calls == [
            pretend.call("3 malware checks found in codebase."),
            pretend.call("ExampleHookedCheck is unmodified."),
            pretend.call("ExampleScheduledCheck is unmodified."),
            pretend.call("Adding new FakeMalwareCheck to the database."),
        ]
        assert db_session.query(MalwareCheck).count() == 3

        new_check = (
            db_session.query(MalwareCheck)
            .filter(MalwareCheck.name == "FakeMalwareCheck")
            .one()
        )

        assert new_check.state == MalwareCheckState.disabled

        del tasks.checks.FakeMalwareCheck

    def test_too_many_db_checks(self, db_session, monkeypatch):
        monkeypatch.setattr(tasks, "checks", test_checks)

        MalwareCheckFactory.create(
            name="ExampleHookedCheck", state=MalwareCheckState.enabled
        )
        MalwareCheckFactory.create(
            name="ExampleScheduledCheck", state=MalwareCheckState.enabled
        )
        MalwareCheckFactory.create(
            name="AnotherCheck", state=MalwareCheckState.evaluation, version=2
        )

        task = pretend.stub()

        request = pretend.stub(
            db=db_session,
            log=pretend.stub(
                info=pretend.call_recorder(lambda *args, **kwargs: None),
                error=pretend.call_recorder(lambda *args, **kwargs: None),
            ),
        )

        with pytest.raises(Exception):
            tasks.sync_checks(task, request)

        assert request.log.info.calls == [
            pretend.call("2 malware checks found in codebase."),
        ]

        assert request.log.error.calls == [
            pretend.call(
                "Found 3 active checks in the db, but only 2 checks in code. Please \
manually move superfluous checks to the wiped_out state in the check admin: \
AnotherCheck"
            ),
        ]

    def test_only_wiped_out(self, db_session, monkeypatch):
        monkeypatch.setattr(tasks, "checks", test_checks)
        MalwareCheckFactory.create(
            name="ExampleHookedCheck", state=MalwareCheckState.wiped_out
        )
        MalwareCheckFactory.create(
            name="ExampleScheduledCheck", state=MalwareCheckState.wiped_out
        )

        task = pretend.stub()
        request = pretend.stub(
            db=db_session,
            log=pretend.stub(
                info=pretend.call_recorder(lambda *args, **kwargs: None),
                error=pretend.call_recorder(lambda *args, **kwargs: None),
            ),
        )

        tasks.sync_checks(task, request)

        assert request.log.info.calls == [
            pretend.call("2 malware checks found in codebase."),
        ]

        assert request.log.error.calls == [
            pretend.call(
                "ExampleHookedCheck is wiped_out and cannot be synced. Please remove check \
from codebase."
            ),
            pretend.call(
                "ExampleScheduledCheck is wiped_out and cannot be synced. Please remove check \
from codebase."
            ),
        ]


class TestRemoveVerdicts:
    def test_no_verdicts(self, db_session):
        check = MalwareCheckFactory.create()

        request = pretend.stub(
            db=db_session,
            log=pretend.stub(info=pretend.call_recorder(lambda *args, **kwargs: None),),
        )
        task = pretend.stub()
        removed = tasks.remove_verdicts(task, request, check.name)

        assert request.log.info.calls == [
            pretend.call(
                "Removing 0 malware verdicts associated with %s version 1." % check.name
            ),
        ]
        assert removed == 0

    @pytest.mark.parametrize(("check_with_verdicts"), [True, False])
    def test_many_verdicts(self, db_session, check_with_verdicts):
        check0 = MalwareCheckFactory.create()
        check1 = MalwareCheckFactory.create()
        project = ProjectFactory.create(name="foo")
        release = ReleaseFactory.create(project=project)
        file0 = FileFactory.create(release=release, filename="foo.bar")
        num_verdicts = 10

        for i in range(num_verdicts):
            MalwareVerdictFactory.create(check=check1, release_file=file0)

        assert db_session.query(MalwareVerdict).count() == num_verdicts

        request = pretend.stub(
            db=db_session,
            log=pretend.stub(info=pretend.call_recorder(lambda *args, **kwargs: None),),
        )

        task = pretend.stub()

        if check_with_verdicts:
            wiped_out_check = check1
        else:
            wiped_out_check = check0
            num_verdicts = 0

        removed = tasks.remove_verdicts(task, request, wiped_out_check.name)

        assert request.log.info.calls == [
            pretend.call(
                "Removing %d malware verdicts associated with %s version 1."
                % (num_verdicts, wiped_out_check.name)
            ),
        ]

        assert removed == num_verdicts
