# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import celery
import pretend
import pytest

# from sqlalchemy.orm.exc import NoResultFound
from warehouse.malware.models import MalwareVerdict
from warehouse.malware.tasks import run_check

from ...common.db.malware import MalwareCheckFactory
from ...common.db.packaging import FileFactory, ProjectFactory, ReleaseFactory


def test_run_check(monkeypatch, db_request):
    project = ProjectFactory.create(name="foo")
    release = ReleaseFactory.create(project=project)
    file0 = FileFactory.create(release=release, filename="foo.bar")
    MalwareCheckFactory.create(name="ExampleCheck", state="enabled")

    task = pretend.stub()
    run_check(task, db_request, "ExampleCheck", file0.id)
    assert db_request.db.query(MalwareVerdict).one()


def test_run_check_missing_check_id(monkeypatch, db_session):
    task = pretend.stub(
        retry=pretend.call_recorder(pretend.raiser(celery.exceptions.Retry))
    )

    request = pretend.stub(
        db=db_session,
        log=pretend.stub(error=pretend.call_recorder(lambda *args, **kwargs: None),),
    )

    with pytest.raises(celery.exceptions.Retry):
        run_check(task, request, "ExampleCheck", "d03d75d1-2511-4a8b-9759-62294a6fe3a7")

    assert request.log.error.calls == [
        pretend.call(
            "Error executing check %s: %s", "ExampleCheck", "No row was found for one()"
        )
    ]

    """
    assert task.retry.calls == [
        pretend.call(exc=NoResultFound("No row was found for one()"))
    ]
    """


def test_run_check_missing_check(db_request):
    task = pretend.stub()
    with pytest.raises(AttributeError):
        run_check(
            task,
            db_request,
            "DoesNotExistCheck",
            "d03d75d1-2511-4a8b-9759-62294a6fe3a7",
        )
