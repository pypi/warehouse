# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from collections import defaultdict

import pytest

from warehouse.malware.models import MalwareCheckState, MalwareCheckType
from warehouse.malware.utils import get_check_fields, get_enabled_hooked_checks

from ...common.checks import ExampleHookedCheck, ExampleScheduledCheck
from ...common.db.malware import MalwareCheckFactory


class TestGetEnabledChecks:
    def test_one(self, db_session):
        check = MalwareCheckFactory.create(
            state=MalwareCheckState.enabled, check_type=MalwareCheckType.event_hook
        )
        result = defaultdict(list)
        result[check.hooked_object.value].append(check.name)
        checks = get_enabled_hooked_checks(db_session)
        assert checks == result

    def test_many(self, db_session):
        result = defaultdict(list)
        for i in range(10):
            check = MalwareCheckFactory.create()
            if (
                check.state == MalwareCheckState.enabled
                and check.check_type == MalwareCheckType.event_hook
            ):
                result[check.hooked_object.value].append(check.name)

        checks = get_enabled_hooked_checks(db_session)
        assert checks == result

    def test_none(self, db_session):
        checks = get_enabled_hooked_checks(db_session)
        assert checks == defaultdict(list)


class TestGetCheckFields:
    @pytest.mark.parametrize(
        ("check", "result"),
        [
            (
                ExampleHookedCheck,
                {
                    "name": "ExampleHookedCheck",
                    "version": 1,
                    "short_description": "An example hook-based check",
                    "long_description": "The purpose of this check is to test the \
implementation of a hook-based check. This check will generate verdicts if enabled.",
                    "check_type": "event_hook",
                    "hooked_object": "File",
                },
            ),
            (
                ExampleScheduledCheck,
                {
                    "name": "ExampleScheduledCheck",
                    "version": 1,
                    "short_description": "An example scheduled check",
                    "long_description": "The purpose of this check is to test the \
implementation of a scheduled check. This check will generate verdicts if enabled.",
                    "check_type": "scheduled",
                    "schedule": {"minute": "0", "hour": "*/8"},
                },
            ),
        ],
    )
    def test_success(self, check, result):
        assert get_check_fields(check) == result

    def test_failure(self, monkeypatch):
        monkeypatch.delattr(ExampleScheduledCheck, "schedule")

        with pytest.raises(AttributeError):
            get_check_fields(ExampleScheduledCheck)
