# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from datetime import datetime

import pretend

from pyramid.httpexceptions import HTTPSeeOther

from warehouse.admin.views import malware_reports as views
from warehouse.packaging.models import Project

from ....common.db.accounts import UserFactory
from ....common.db.packaging import (
    ProjectFactory,
    ProjectObservationFactory,
    RoleFactory,
)


class TestMalwareReportsList:
    def test_malware_reports_list(self, db_request):
        assert views.malware_reports_list(db_request) == {"malware_reports": []}

    def test_malware_reports_list_with_observations(self, db_request):
        ProjectObservationFactory.create(kind="is_spam")
        ProjectObservationFactory.create(kind="is_malware", actions={"foo": "bar"})
        ProjectObservationFactory.create(kind="is_malware", related=None)
        malware = ProjectObservationFactory.create_batch(size=3, kind="is_malware")

        assert views.malware_reports_list(db_request) == {"malware_reports": malware}


class TestMalwareReportsProjectList:
    def test_malware_reports_project_list(self, db_request):
        project = ProjectFactory.create()
        assert views.malware_reports_project_list(project, db_request) == {
            "project": project,
            "malware_reports": [],
        }

    def test_malware_reports_project_list_with_project(self, db_request):
        project = ProjectFactory.create()
        report = ProjectObservationFactory.create(kind="is_malware", related=project)

        assert views.malware_reports_project_list(project, db_request) == {
            "project": project,
            "malware_reports": [report],
        }

    def test_malware_reports_project_list_with_project_and_actions(self, db_request):
        project = ProjectFactory.create()
        ProjectObservationFactory.create(
            kind="is_malware", related=project, actions={"foo": "bar"}
        )

        assert views.malware_reports_project_list(project, db_request) == {
            "project": project,
            "malware_reports": [],
        }

    def test_malware_reports_project_verdict_not_malware(self, db_request):
        project = ProjectFactory.create()
        report = ProjectObservationFactory.create(kind="is_malware", related=project)
        ProjectObservationFactory.create(kind="something_else", related=project)

        db_request.POST["confirm_project_name"] = project.name
        db_request.POST["reason"] = "This is a test"
        db_request.route_path = lambda a: "/admin/malware_reports/"
        db_request.session = pretend.stub(
            flash=pretend.call_recorder(lambda *a, **kw: None)
        )
        db_request.user = UserFactory.create()

        result = views.malware_reports_project_verdict_not_malware(project, db_request)

        assert isinstance(result, HTTPSeeOther)
        assert result.headers["Location"] == "/admin/malware_reports/"
        assert db_request.session.flash.calls == [
            pretend.call(
                f"Project {project.name} marked as not malware.\n"
                "Please update related Help Scout conversations.",
                queue="success",
            )
        ]

        assert len(report.actions) == 1
        action_record = list(report.actions.values())[0]

        assert action_record["action"] == "verdict_not_malware"
        assert action_record["actor"] == db_request.user.username
        assert isinstance(datetime.fromisoformat(action_record["created_at"]), datetime)
        assert action_record["reason"] == "This is a test"

    def test_malware_reports_project_verdict_remove_malware(self, db_request):
        owner_user = UserFactory.create(is_frozen=False)
        project = ProjectFactory.create()
        RoleFactory(user=owner_user, project=project, role_name="Owner")
        report = ProjectObservationFactory.create(kind="is_malware", related=project)

        db_request.POST["confirm_project_name"] = project.name
        db_request.route_path = lambda a: "/admin/malware_reports/"
        db_request.session = pretend.stub(
            flash=pretend.call_recorder(lambda *a, **kw: None)
        )
        db_request.user = owner_user

        result = views.malware_reports_project_verdict_remove_malware(
            project, db_request
        )

        assert isinstance(result, HTTPSeeOther)
        assert result.headers["Location"] == "/admin/malware_reports/"
        assert db_request.session.flash.calls == [
            pretend.call(f"Deleted the project '{project.name}'", queue="success"),
            pretend.call(
                f"Malware Project {project.name} removed.\n"
                "Please update related Help Scout conversations.",
                queue="success",
            ),
        ]

        assert len(report.actions) == 1
        assert db_request.db.get(Project, project.id) is None
        assert db_request.user.is_frozen is True


class TestMalwareReportsDetail:
    def test_malware_reports_detail(self, db_request):
        assert views.malware_reports_detail(db_request) == {"report": None}

    def test_malware_reports_detail_with_report(self, db_request):
        report = ProjectObservationFactory.create(kind="is_malware")
        db_request.matchdict["observation_id"] = str(report.id)

        assert views.malware_reports_detail(db_request) == {"report": report}

    def test_detail_not_malware_for_project(self, db_request):
        report = ProjectObservationFactory.create(kind="is_malware")
        db_request.matchdict["observation_id"] = str(report.id)
        db_request.POST["reason"] = "This is a test"
        db_request.route_path = lambda a: "/admin/malware_reports/"
        db_request.session = pretend.stub(
            flash=pretend.call_recorder(lambda *a, **kw: None)
        )
        db_request.user = UserFactory.create()

        result = views.not_malware_for_project(db_request)

        assert isinstance(result, HTTPSeeOther)
        assert result.headers["Location"] == "/admin/malware_reports/"
        assert db_request.session.flash.calls == [
            pretend.call(
                f"Project {report.related.name} marked as not malware.\n"
                "Please update related Help Scout conversations.",
                queue="success",
            )
        ]

        assert len(report.actions) == 1
        action_record = list(report.actions.values())[0]

        assert action_record["action"] == "verdict_not_malware"
        assert action_record["actor"] == db_request.user.username
        assert isinstance(datetime.fromisoformat(action_record["created_at"]), datetime)
        assert action_record["reason"] == "This is a test"

    def test_detail_remove_malware_for_project(self, db_request):
        owner_user = UserFactory.create(is_frozen=False)
        project = ProjectFactory.create()
        RoleFactory(user=owner_user, project=project, role_name="Owner")
        report = ProjectObservationFactory.create(kind="is_malware", related=project)

        db_request.matchdict["observation_id"] = str(report.id)
        db_request.POST["confirm_project_name"] = project.name
        db_request.POST["reason"] = "This is a test"
        db_request.route_path = lambda a: "/admin/malware_reports/"
        db_request.session = pretend.stub(
            flash=pretend.call_recorder(lambda *a, **kw: None)
        )
        db_request.user = owner_user

        result = views.remove_malware_for_project(db_request)

        assert isinstance(result, HTTPSeeOther)
        assert result.headers["Location"] == "/admin/malware_reports/"
        assert db_request.session.flash.calls == [
            pretend.call(f"Deleted the project '{project.name}'", queue="success"),
            pretend.call(
                f"Malware Project {report.related.name} removed.\n"
                "Please update related Help Scout conversations.",
                queue="success",
            ),
        ]

        assert len(report.actions) == 1
        assert db_request.db.get(Project, project.id) is None
        assert db_request.user.is_frozen is True
