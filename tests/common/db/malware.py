# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
import random

import factory

from warehouse.malware.models import (
    MalwareCheck,
    MalwareCheckObjectType,
    MalwareCheckState,
    MalwareCheckType,
    MalwareVerdict,
    VerdictClassification,
    VerdictConfidence,
)

from .base import WarehouseFactory
from .packaging import FileFactory


class MalwareCheckFactory(WarehouseFactory):
    class Meta:
        model = MalwareCheck

    name = factory.faker.Faker("password", special_chars=False, length=12)
    version = 1
    short_description = factory.faker.Faker("text", max_nb_chars=80)
    long_description = factory.faker.Faker("text", max_nb_chars=300)
    check_type = factory.LazyFunction(lambda: random.choice(list(MalwareCheckType)))
    hooked_object = factory.LazyFunction(
        lambda: random.choice(list(MalwareCheckObjectType))
    )
    schedule = {"minute": "*/10"}
    state = factory.LazyFunction(lambda: random.choice(list(MalwareCheckState)))
    created = factory.faker.Faker(
        "date_time_between_dates",
        datetime_start=(datetime.datetime.utcnow() - datetime.timedelta(days=7)),
    )


class MalwareVerdictFactory(WarehouseFactory):
    class Meta:
        model = MalwareVerdict

    check = factory.SubFactory(MalwareCheckFactory)
    release_file = factory.SubFactory(FileFactory)
    release = None
    project = None
    manually_reviewed = True
    reviewer_verdict = factory.LazyFunction(
        lambda: random.choice(list(VerdictClassification))
    )
    classification = factory.LazyFunction(
        lambda: random.choice(list(VerdictClassification))
    )
    confidence = factory.LazyFunction(lambda: random.choice(list(VerdictConfidence)))
    message = factory.faker.Faker("text", max_nb_chars=80)
    run_date = factory.faker.Faker(
        "date_time_between_dates", datetime_start=datetime.datetime.utcnow()
    )
    full_report_link = None
    details = None
